#pragma once

#include "../lex/tokenizer.h"

enum AstType
{
    TRANSLATION_UNIT,
    EXTERNAL_DECLARATION,
    FUNCTION_DEFINITION,
    DECLARATION,
    DECLARATOR_INITIALIZER,
    DECLARATOR,
    DIRECT_DECLARATOR,
    ABSTRACT_DECLARATOR,
    DIRECT_ABSTRACT_DECLARATOR,
    PARAMETER_LIST,
    PARAMETER_VAR_LIST,
    PARAMETER_DECLARATION,
    IDENTIFIER,
    IDENTIFIER_LIST,
    TYPE_NAME,
    POINTER,
    POINTER_LIST,
    DECLARATION_SPECIFIERS,
    STORAGE_CLASS_SPECIFIER,
    TYPE_QUALIFIER,
    TYPE_SPECIFIER,
    TYPE_QUALIFIER_LIST,
    CONST_QUALIFIER,
    VOLATILE_QUALIFIER,
    SPECIFIER_QUALIFIER_LIST,
    STRUCT_SPECIFIER,
    UNION_SPECIFIER,
    STRUCT_DECLARATION,
    STRUCT_DECLARATOR_LIST,
    STRUCT_DECLARATOR,
    ENUM_SPECIFIER,
    ENUM_CONSTANT,
    TYPEDEF_NAME,
    INITIALIZER,
    INITIALIZER_LIST,
    EXPR,
    COMMA_EXPR,
    ASSIGN_EXPR,
    COND_EXPR,
    OR_EXPR,
    AND_EXPR,
    BIT_OR_EXPR,
    BIT_XOR_EXPR,
    BIT_AND_EXPR,
    EQ_EXPR,
    REL_EXPR,
    SHIFT_EXPR,
    ADD_EXPR,
    MUL_EXPR,
    CAST_EXPR,
    UNARY_EXPR,
    POSTFIX_EXPR,
    PRIMARY_EXPR,
    ARGUMENT_EXPR_LIST,
    CONSTANT_EXPR,
    STMT,
    STMT_LIST,
    LABELED_STMT,
    LABEL_STMT,
    CASE_STMT,
    DEFAULT_STMT,
    COMPOUND_STMT,
    EXPRESSION_STMT,
    SELECTION_STMT,
    IF_ELSE_STMT,
    SWITCH_STMT,
    ITERATION_STMT,
    WHILE_STMT,
    DO_WHILE_STMT,
    FOR_STMT,
    JUMP_STMT,
    GOTO_STMT,
    CONTINUE_STMT,
    BREAK_STMT,
    RETURN_STMT,
};

struct Ast
{
    Ast *parent;
    Ast *leftChild;
    Ast *rightSibling;

    AstType type;
    Token token;
};

// Build

Ast *   ParseTranslationUnit(TokenIterator & ti);

bool    IsAstTypeSpecifier(AstType type);
bool    IsAstTypeQualifier(AstType type);

// Debug

// TODO: compare token
bool    IsEqualAst(Ast * a1, Ast * a2);
void    DebugPrintAst(Ast * ast);
