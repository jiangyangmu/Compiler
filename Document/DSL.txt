
new_type();
type_set_specifier_qualifier(type);
type_merge();
	// (pointer, any) -> pointer to any
	// (array, any) -> array of any
	// (function, any) -> function of any
	// (empty, any) -> any
type_push(type);
type_top();
type_pop();

new_pointer();
pointer_set_qualifier(int);

new_array();
array_set_size(int);

new_function();
function_add_parameter(name, type); // name can be empty
function_set_varlist();
function_set_env(env);
function_set_body(stmt);
function_get_env();

new_id(string);
id_pop();

new_struct();
struct_set_name(string);
struct_add_member(id, type);
struct_complete();
// type_pop();

new_enum();
enum_set_name(string);
enum_add_const(string);
enum_set_const_value(int);
enum_complete();
// type_pop();

specifier_qualifier_begin();
specifier_add(type);
qualifier_add(token);
specifier_qualifier_get();
specifier_qualifier_end();

qualifier_begin();
qualifier_get();
qualifier_end();

storage_begin();
storage_add(token);
storage_get();
storage_end();

scope_begin(scope);
scope_get();
scope_end();

compute_storage_type(scope, storage-token, obj/func-decl/func-defi, file-scope-symbol);

new_symbol();
symbol_set_id(string);
symbol_set_symbol_type(symbol_type); // id, alias, tag
symbol_set_object_type(object_type);
symbol_set_storage_type(storage_type);
	// none: compile-time const, type spec (struct/enum)
	// in this translation unit
	// in other translation unit
	// local
symbol_set_export();
symbol_pop();

new_env();
env_push(env);
env_add_symbol(symbol);
env_find(string, symbol_type); // also search parent envs
env_find_in_file_scope(name, symbol_type); // only return file scope results
env_pop();

// TODO: tag declaration & definition
// XXX: for type building API, check prototype_TypeSystem.txt:312

stmt_pop();
expr_pop();

new_label_stmt();
label_stmt_set_label(label);
label_stmt_set_stmt(stmt);

new_case_stmt();
case_stmt_set_expr(expr);
case_stmt_set_stmt(stmt);

new_default_stmt();
default_stmt_set_stmt(stmt);

new_compound_stmt();
compound_stmt_add(stmt);
compound_stmt_set_env(env);

new_expr_stmt();
expr_stmt_set_expr(expr);

new_if_stmt();
if_stmt_set_expr(expr);
if_stmt_set_if_block(stmt);
if_stmt_set_else_block(stmt);

new_switch_stmt();
switch_stmt_set_expr(expr);
switch_stmt_set_stmt(stmt);

new_while_stmt();
while_stmt_set_expr(expr);
while_stmt_set_stmt(stmt);

new_do_while_stmt();
do_while_stmt_set_stmt(expr);
do_while_stmt_set_expr(stmt);

new_for_stmt();
for_stmt_set_init_expr(expr);
for_stmt_set_cond_expr(expr);
for_stmt_set_tail_expr(expr);
for_stmt_set_stmt(stmt);

new_goto_stmt();
goto_stmt_set_label(token);

new_continue_stmt();

new_break_stmt();

new_return_stmt();
return_stmt_set_expr(expr);

expr_comma(comma, assign);
expr_assign(cond, op, assign)
expr_cond(or, comma, cond)
expr_or(or, and)
expr_and(and, bor)
expr_bit_or(bor, bxor)
expr_bit_xor(bxor, band)
expr_bit_and(band, eq)
expr_eq(eq, op, rel)
expr_rel(rel, op, shift)
expr_shift(shift, op, add)
expr_add(add, op, mul)
expr_mul(mul, op, cast)
expr_cast(type, unary)
expr_unary(op, unary/cast)
expr_unary(sizeof-value)
expr_postfix(primary, op, expr/argu/id)
expr_primary(token)
